{"version":3,"file":"task.test.js","sourceRoot":"","sources":["../../src/task.test.ts"],"names":[],"mappings":"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","sourcesContent":["// // // import request from 'supertest';\r\n// // // import { sequelize } from './index';\r\n// // // import Task from './models/Task';\r\n// // // import { app } from './index';\r\n\r\n// // // beforeAll(async () => {\r\n// // //   await sequelize.sync({ force: true }); // Reset the database before running tests\r\n// // // });\r\n\r\n// // // afterAll(async () => {\r\n// // //   await sequelize.close(); // Close the database connection after all tests are done\r\n// // // });\r\n\r\n// // // describe('Task API', () => {\r\n// // //   it('should create a new task', async () => {\r\n// // //     const response = await request(app)\r\n// // //       .post('/tasks')\r\n// // //       .send({\r\n// // //         title: 'Test Task',\r\n// // //         description: 'This is a test task',\r\n// // //         completed: false,\r\n// // //       });\r\n\r\n// // //     expect(response.status).toBe(201);\r\n// // //     expect(response.body.title).toBe('Test Task');\r\n// // //     expect(response.body.description).toBe('This is a test task');\r\n// // //     expect(response.body.completed).toBe(false);\r\n// // //   });\r\n\r\n// // //   it('should retrieve all tasks', async () => {\r\n// // //     const response = await request(app).get('/tasks');\r\n// // //     expect(response.status).toBe(200);\r\n// // //     expect(response.body.length).toBe(1);\r\n// // //   });\r\n\r\n// // //   // Additional tests for GET by ID, UPDATE, DELETE, etc.\r\n// // // });\r\n// // import { sequelize } from './index';\r\n// // import Task from \"./models/Task\"\r\n\r\n// // beforeAll(async () => {\r\n// //   await sequelize.sync({ force: true });\r\n// // });\r\n\r\n// // afterAll(async () => {\r\n// //   await sequelize.close();\r\n// // });\r\n\r\n// // // test('should do something', async () => {\r\n// // //   // Your test code here\r\n// // // });\r\n\r\n// // describe('Task Model', () => {\r\n// //   beforeAll(async () => {\r\n// //     // Sync the database before running tests\r\n// //     await sequelize.sync({ force: true });\r\n// //   });\r\n\r\n// //   it('should create a new task', async () => {\r\n// //     const task = await Task.create({\r\n// //       title: 'Test Task',\r\n// //       description: 'This is a test task',\r\n// //       completed: false,\r\n// //     });\r\n\r\n// //     expect(task.id).toBeDefined();\r\n// //     expect(task.title).toBe('Test Task');\r\n// //     expect(task.description).toBe('This is a test task');\r\n// //     expect(task.completed).toBe(false);\r\n// //   });\r\n\r\n// //   // Additional tests for CRUD operations can be added here\r\n\r\n// //   afterAll(async () => {\r\n// //     // Close the database connection after tests\r\n// //     await sequelize.close();\r\n// //   });\r\n// // });\r\n\r\n// import request from 'supertest';\r\n// import { sequelize } from './index';\r\n// import Task from './models/Task';\r\n\r\n// // Ensure the database is reset before running tests\r\n// beforeAll(async () => {\r\n//   await sequelize.sync({ force: true });\r\n// });\r\n\r\n// // Clean up after each test\r\n// afterEach(async () => {\r\n//   await sequelize.truncate({ cascade: true });\r\n// });\r\n\r\n// describe('Task API', () => {\r\n\r\n//   // Test creating a new task\r\n//   test('should create a new task', async () => {\r\n//     const response = await request('http://localhost:3000')\r\n//       .post('/tasks')\r\n//       .send({\r\n//         title: 'New Task',\r\n//         description: 'New Task Description',\r\n//         completed: false,\r\n//       });\r\n    \r\n//     expect(response.status).toBe(201);\r\n//     expect(response.body).toHaveProperty('id');\r\n//     expect(response.body.title).toBe('New Task');\r\n//     expect(response.body.description).toBe('New Task Description');\r\n//     expect(response.body.completed).toBe(false);\r\n//   });\r\n\r\n//   // Test getting all tasks\r\n//   test('should get all tasks', async () => {\r\n//     await Task.create({\r\n//       title: 'Task 1',\r\n//       description: 'Description 1',\r\n//       completed: false,\r\n//     });\r\n//     await Task.create({\r\n//       title: 'Task 2',\r\n//       description: 'Description 2',\r\n//       completed: true,\r\n//     });\r\n\r\n//     const response = await request('http://localhost:3000').get('/tasks');\r\n    \r\n//     expect(response.status).toBe(200);\r\n//     expect(response.body.length).toBe(2);\r\n//     expect(response.body[0]).toHaveProperty('title', 'Task 1');\r\n//     expect(response.body[1]).toHaveProperty('title', 'Task 2');\r\n//   });\r\n\r\n//   // Test getting a single task by ID\r\n//   test('should get a task by ID', async () => {\r\n//     const task = await Task.create({\r\n//       title: 'Single Task',\r\n//       description: 'Single Task Description',\r\n//       completed: false,\r\n//     });\r\n\r\n//     const response = await request('http://localhost:3000').get(`/tasks/${task.id}`);\r\n    \r\n//     expect(response.status).toBe(200);\r\n//     expect(response.body).toHaveProperty('title', 'Single Task');\r\n//   });\r\n\r\n//   // Test updating a task\r\n//   test('should update a task by ID', async () => {\r\n//     const task = await Task.create({\r\n//       title: 'Update Task',\r\n//       description: 'Update Task Description',\r\n//       completed: false,\r\n//     });\r\n\r\n//     const response = await request('http://localhost:3000')\r\n//       .put(`/tasks/${task.id}`)\r\n//       .send({\r\n//         title: 'Updated Title',\r\n//         description: 'Updated Description',\r\n//         completed: true,\r\n//       });\r\n\r\n//     expect(response.status).toBe(200);\r\n//     expect(response.body).toHaveProperty('title', 'Updated Title');\r\n//     expect(response.body).toHaveProperty('description', 'Updated Description');\r\n//     expect(response.body).toHaveProperty('completed', true);\r\n//   });\r\n\r\n//   // Test deleting a task\r\n//   test('should delete a task by ID', async () => {\r\n//     const task = await Task.create({\r\n//       title: 'Delete Task',\r\n//       description: 'Delete Task Description',\r\n//       completed: false,\r\n//     });\r\n\r\n//     const response = await request('http://localhost:3000').delete(`/tasks/${task.id}`);\r\n    \r\n//     expect(response.status).toBe(204);\r\n\r\n//     // Verify that the task has been deleted\r\n//     const getResponse = await request('http://localhost:3000').get(`/tasks/${task.id}`);\r\n//     expect(getResponse.status).toBe(404);\r\n//   });\r\n\r\n// });\r\n\r\n\r\n// // import { sequelize } from './index'; // Import sequelize to connect to the DB\r\n// // import Task from './models/Task';\r\n\r\n// // describe('Task Model', () => {\r\n// //   beforeAll(async () => {\r\n// //     // Sync the database before running tests\r\n// //     await sequelize.sync({ force: true });\r\n// //   });\r\n\r\n// //   it('should create a new task', async () => {\r\n// //     const task = await Task.create({\r\n// //       title: 'Test Task',\r\n// //       description: 'This is a test task',\r\n// //       completed: false,\r\n// //     });\r\n\r\n// //     expect(task.id).toBeDefined();\r\n// //     expect(task.title).toBe('Test Task');\r\n// //     expect(task.description).toBe('This is a test task');\r\n// //     expect(task.completed).toBe(false);\r\n// //   });\r\n\r\n// //   // Additional tests for CRUD operations can be added here\r\n\r\n// //   afterAll(async () => {\r\n// //     // Close the database connection after tests\r\n// //     await sequelize.close();\r\n// //   });\r\n// // });\r\n\r\n// // import { sequelize } from './index'; // Import sequelize to connect to the DB\r\n// // import Task from './models/Task';\r\n\r\n// // beforeAll(async () => {\r\n// //   await sequelize.sync({ force: true }); // Ensure the database is reset before running tests\r\n// // });\r\n\r\n// // test('should create a task', async () => {\r\n// //   const task = await Task.create({\r\n// //     title: 'Test Task',\r\n// //     description: 'Test Description',\r\n// //     completed: false,\r\n// //   });\r\n// //   expect(task).toHaveProperty('id');\r\n// //   expect(task.title).toBe('Test Task');\r\n// // });\r\n\r\n// import * as http from 'http';\r\n// import express from 'express';\r\n// import Task from './models/Task';\r\n// import { sequelize } from './index';\r\n\r\n// let server: http.Server;\r\n\r\n// beforeAll(async () => {\r\n//   // Setup Express server\r\n//   const app = express();\r\n//   app.use(express.json());\r\n\r\n//   // Initialize CRUD operations\r\n//   app.post('/tasks', async (req, res) => {\r\n//     try {\r\n//       const { title, description, completed } = req.body;\r\n//       const task = await Task.create({ title, description, completed });\r\n//       res.status(201).json(task);\r\n//     } catch (error) {\r\n//       res.status(500).json({ error: 'Internal Server Error' });\r\n//     }\r\n//   });\r\n\r\n//   app.get('/tasks', async (req, res) => {\r\n//     try {\r\n//       const tasks = await Task.findAll();\r\n//       res.status(200).json(tasks);\r\n//     } catch (error) {\r\n//       res.status(500).json({ error: 'Internal Server Error' });\r\n//     }\r\n//   });\r\n\r\n//   app.get('/tasks/:id', async (req, res) => {\r\n//     try {\r\n//       const task = await Task.findByPk(req.params.id);\r\n//       if (task) {\r\n//         res.status(200).json(task);\r\n//       } else {\r\n//         res.status(404).json({ error: 'Task not found' });\r\n//       }\r\n//     } catch (error) {\r\n//       res.status(500).json({ error: 'Internal Server Error' });\r\n//     }\r\n//   });\r\n\r\n//   app.put('/tasks/:id', async (req, res) => {\r\n//     try {\r\n//       const task = await Task.findByPk(req.params.id);\r\n//       if (task) {\r\n//         const { title, description, completed } = req.body;\r\n//         task.title = title || task.title;\r\n//         task.description = description || task.description;\r\n//         task.completed = completed !== undefined ? completed : task.completed;\r\n//         await task.save();\r\n//         res.status(200).json(task);\r\n//       } else {\r\n//         res.status(404).json({ error: 'Task not found' });\r\n//       }\r\n//     } catch (error) {\r\n//       res.status(500).json({ error: 'Internal Server Error' });\r\n//     }\r\n//   });\r\n\r\n//   app.delete('/tasks/:id', async (req, res) => {\r\n//     try {\r\n//       const task = await Task.findByPk(req.params.id);\r\n//       if (task) {\r\n//         await task.destroy();\r\n//         res.status(204).send();\r\n//       } else {\r\n//         res.status(404).json({ error: 'Task not found' });\r\n//       }\r\n//     } catch (error) {\r\n//       res.status(500).json({ error: 'Internal Server Error' });\r\n//     }\r\n//   });\r\n\r\n//   server = http.createServer(app);\r\n//   await sequelize.sync({ force: true });\r\n// });\r\n\r\n// afterAll(async () => {\r\n//   if (server) {\r\n//     server.close();\r\n//   }\r\n//   await sequelize.close();\r\n// });\r\n\r\n// const makeRequest = (method: string, url: string, data?: any) => {\r\n//   return new Promise((resolve, reject) => {\r\n//     const options = {\r\n//       method,\r\n//       headers: { 'Content-Type': 'application/json' }\r\n//     };\r\n\r\n//     const req = http.request(url, options, (res) => {\r\n//       let body = '';\r\n//       res.on('data', (chunk) => { body += chunk; });\r\n//       res.on('end', () => resolve({ statusCode: res.statusCode, body }));\r\n//     });\r\n\r\n//     req.on('error', (e) => reject(e));\r\n\r\n//     if (data) {\r\n//       req.write(JSON.stringify(data));\r\n//     }\r\n\r\n//     req.end();\r\n//   });\r\n// };\r\n\r\n// test('should create a task', async () => {\r\n//   const response = await makeRequest('POST', 'http://localhost:3000/tasks', {\r\n//     title: 'Test Task',\r\n//     description: 'Test Description',\r\n//     completed: false\r\n//   });\r\n//   const task = JSON.parse(response.body);\r\n//   expect(response.statusCode).toBe(201);\r\n//   expect(task).toHaveProperty('id');\r\n//   expect(task.title).toBe('Test Task');\r\n// });\r\n\r\n// test('should get all tasks', async () => {\r\n//   await makeRequest('POST', 'http://localhost:3000/tasks', {\r\n//     title: 'Test Task',\r\n//     description: 'Test Description',\r\n//     completed: false\r\n//   });\r\n\r\n//   const response = await makeRequest('GET', 'http://localhost:3000/tasks');\r\n//   const tasks = JSON.parse(response.body);\r\n//   expect(response.statusCode).toBe(200);\r\n//   expect(tasks).toHaveLength(1);\r\n// });\r\n\r\n// test('should get a single task by ID', async () => {\r\n//   const createResponse = await makeRequest('POST', 'http://localhost:3000/tasks', {\r\n//     title: 'Test Task',\r\n//     description: 'Test Description',\r\n//     completed: false\r\n//   });\r\n//   const createdTask = JSON.parse(createResponse.body);\r\n//   const response = await makeRequest('GET', `http://localhost:3000/tasks/${createdTask.id}`);\r\n//   const task = JSON.parse(response.body);\r\n//   expect(response.statusCode).toBe(200);\r\n//   expect(task.title).toBe('Test Task');\r\n// });\r\n\r\n// test('should update a task by ID', async () => {\r\n//   const createResponse = await makeRequest('POST', 'http://localhost:3000/tasks', {\r\n//     title: 'Test Task',\r\n//     description: 'Test Description',\r\n//     completed: false\r\n//   });\r\n//   const createdTask = JSON.parse(createResponse.body);\r\n\r\n//   const updateResponse = await makeRequest('PUT', `http://localhost:3000/tasks/${createdTask.id}`, {\r\n//     title: 'Updated Task',\r\n//     description: 'Updated Description',\r\n//     completed: true\r\n//   });\r\n//   const updatedTask = JSON.parse(updateResponse.body);\r\n//   expect(updateResponse.statusCode).toBe(200);\r\n//   expect(updatedTask.title).toBe('Updated Task');\r\n//   expect(updatedTask.completed).toBe(true);\r\n// });\r\n\r\n// test('should delete a task by ID', async () => {\r\n//   const createResponse = await makeRequest('POST', 'http://localhost:3000/tasks', {\r\n//     title: 'Test Task',\r\n//     descri\r\n\r\nimport { sequelize } from './index';\r\nimport Task from './models/Task';\r\nimport { testUtils } from '@utils/testUtils';\r\n\r\nbeforeAll(async () => {\r\n  await sequelize.sync({ force: true }); // Ensure the database is reset before running tests\r\n});\r\n\r\ndescribe('Task CRUD Operations', () => {\r\n  let taskId: number;\r\n\r\n  // Test Create Task\r\n  it('should create a task', async () => {\r\n    const response = await testUtils.post('/tasks', {\r\n      title: 'Test Task',\r\n      description: 'Test Description',\r\n      completed: false,\r\n    });\r\n\r\n    expect(response.statusCode).toBe(201);\r\n    expect(response.body).toHaveProperty('id');\r\n    expect(response.body.title).toBe('Test Task');\r\n    taskId = response.body.id; // Save task ID for later tests\r\n  });\r\n\r\n  // Test Read All Tasks\r\n  it('should get all tasks', async () => {\r\n    const response = await testUtils.get('/tasks');\r\n\r\n    expect(response.statusCode).toBe(200);\r\n    expect(Array.isArray(response.body)).toBe(true);\r\n    expect(response.body.length).toBeGreaterThan(0); // Assuming at least one task exists\r\n  });\r\n\r\n  // Test Read Single Task\r\n  it('should get a task by ID', async () => {\r\n    const response = await testUtils.get(`/tasks/${taskId}`);\r\n\r\n    expect(response.statusCode).toBe(200);\r\n    expect(response.body).toHaveProperty('id', taskId);\r\n    expect(response.body.title).toBe('Test Task');\r\n  });\r\n\r\n  // Test Update Task\r\n  it('should update a task by ID', async () => {\r\n    const response = await testUtils.put(`/tasks/${taskId}`, {\r\n      title: 'Updated Task',\r\n      description: 'Updated Description',\r\n      completed: true,\r\n    });\r\n\r\n    expect(response.statusCode).toBe(200);\r\n    expect(response.body).toHaveProperty('id', taskId);\r\n    expect(response.body.title).toBe('Updated Task');\r\n    expect(response.body.completed).toBe(true);\r\n  });\r\n\r\n  // Test Delete Task\r\n  it('should delete a task by ID', async () => {\r\n    const response = await testUtils.delete(`/tasks/${taskId}`);\r\n\r\n    expect(response.statusCode).toBe(204); // No content\r\n  });\r\n\r\n  // Optional: Test fetching the deleted task to ensure it's gone\r\n  it('should not find a deleted task', async () => {\r\n    const response = await testUtils.get(`/tasks/${taskId}`);\r\n\r\n    expect(response.statusCode).toBe(404); // Not found\r\n  });\r\n});\r\n"]}