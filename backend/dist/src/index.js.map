{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as dotenv from 'dotenv';\r\nimport express = require(\"express\")\r\n\r\nimport { Request, Response } from 'express';\r\n\r\n//import express, { Request, Response } from 'express';\r\nimport { Sequelize } from 'sequelize';\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\n// Initialize Sequelize instance\r\nconst sequelize = new Sequelize(\r\n  process.env.DB_NAME || 'task_manager',\r\n  process.env.DB_USER || 'task_manager_user',\r\n  process.env.DB_PASSWORD || 'new_password',\r\n  {\r\n    host: process.env.DB_HOST || 'localhost',\r\n    dialect: 'postgres',\r\n  }\r\n);\r\n\r\n// Initialize Express app\r\nconst app = express();\r\napp.use(express.json());\r\n\r\n// Sync database models\r\nsequelize.sync()\r\n  .then(() => {\r\n    console.log('Database & tables created!');\r\n    // Import Task model only after sync\r\n    const Task = require('./models/Task').default;\r\n\r\n    // CRUD Operations\r\n\r\n    // Create a new task\r\n    app.post('/tasks', async (req: Request, res: Response) => {\r\n      try {\r\n        const { title, description, completed } = req.body;\r\n        const task = await Task.create({ title, description, completed });\r\n        res.status(201).json(task);\r\n      } catch (error) {\r\n        console.error('Error creating task:', error);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n      }\r\n    });\r\n\r\n    // Get all tasks\r\n    app.get('/tasks', async (req: Request, res: Response) => {\r\n      try {\r\n        const tasks = await Task.findAll();\r\n        res.status(200).json(tasks);\r\n      } catch (error) {\r\n        console.error('Error fetching tasks:', error);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n      }\r\n    });\r\n\r\n    // Get a single task by ID\r\n    app.get('/tasks/:id', async (req: Request, res: Response) => {\r\n      try {\r\n        const task = await Task.findByPk(req.params.id);\r\n        if (task) {\r\n          res.status(200).json(task);\r\n        } else {\r\n          res.status(404).json({ error: 'Task not found' });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching task:', error);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n      }\r\n    });\r\n\r\n    // Update a task by ID\r\n    app.put('/tasks/:id', async (req: Request, res: Response) => {\r\n      try {\r\n        const task = await Task.findByPk(req.params.id);\r\n        if (task) {\r\n          const { title, description, completed } = req.body;\r\n          task.title = title || task.title;\r\n          task.description = description || task.description;\r\n          task.completed = completed !== undefined ? completed : task.completed;\r\n          await task.save();\r\n          res.status(200).json(task);\r\n        } else {\r\n          res.status(404).json({ error: 'Task not found' });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating task:', error);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n      }\r\n    });\r\n\r\n    // Delete a task by ID\r\n    app.delete('/tasks/:id', async (req: Request, res: Response) => {\r\n      try {\r\n        const task = await Task.findByPk(req.params.id);\r\n        if (task) {\r\n          await task.destroy();\r\n          res.status(204).send();\r\n        } else {\r\n          res.status(404).json({ error: 'Task not found' });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error deleting task:', error);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n      }\r\n    });\r\n\r\n\r\n  })\r\n  .catch((error) => console.error('Unable to connect to the database:', error));\r\n\r\n// Start the server\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n\r\n// Export sequelize for use in other modules\r\nexport { sequelize };\r\n"]}