{"version":3,"file":"testUtils.js","sourceRoot":"","sources":["../../utils/testUtils.ts"],"names":[],"mappings":";AAAA,wBAAwB;AACxB,2BAA2B;;;;;;AAE3B,kCAAkC;AAClC,wBAAwB;AACxB,kBAAkB;AAClB,IAAI;AAEJ,mGAAmG;AACnG,8CAA8C;AAC9C,wBAAwB;AACxB,gBAAgB;AAChB,wDAAwD;AACxD,SAAS;AAET,wDAAwD;AACxD,uBAAuB;AACvB,uDAAuD;AACvD,mFAAmF;AACnF,UAAU;AAEV,yCAAyC;AAEzC,kBAAkB;AAClB,yCAAyC;AACzC,QAAQ;AAER,iBAAiB;AACjB,QAAQ;AACR,KAAK;AAEL,gDAAwB;AAExB,MAAM,OAAO,GAAG,CAAC,MAAc,EAAE,GAAW,EAAE,IAAU,EAAE,EAAE;IAC1D,OAAO,IAAI,OAAO,CAAoC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACxE,MAAM,GAAG,GAAG,cAAI,CAAC,OAAO,CACtB;YACE,QAAQ,EAAE,WAAW;YACrB,IAAI,EAAE,IAAI;YACV,MAAM;YACN,IAAI,EAAE,GAAG;YACT,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACrE;SACF,EACD,CAAC,GAAG,EAAE,EAAE;YACN,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC;YAC3C,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,GAAG,CAAC,UAAU,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9F,CAAC,CACF,CAAC;QAEF,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACxB,IAAI,IAAI,EAAE,CAAC;YACT,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAClC,CAAC;QACD,GAAG,CAAC,GAAG,EAAE,CAAC;IACZ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEW,QAAA,SAAS,GAAG;IACvB,GAAG,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;IACzC,IAAI,EAAE,CAAC,GAAW,EAAE,IAAS,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC;IAC5D,GAAG,EAAE,CAAC,GAAW,EAAE,IAAS,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC;IAC1D,MAAM,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;CAChD,CAAC","sourcesContent":["// // utils/httpUtils.ts\r\n// import http from 'http';\r\n\r\n// export interface HttpResponse {\r\n//   statusCode: number;\r\n//   body: string;\r\n// }\r\n\r\n// export const makeRequest = (method: string, url: string, data?: any): Promise<HttpResponse> => {\r\n//   return new Promise((resolve, reject) => {\r\n//     const options = {\r\n//       method,\r\n//       headers: { 'Content-Type': 'application/json' }\r\n//     };\r\n\r\n//     const req = http.request(url, options, (res) => {\r\n//       let body = '';\r\n//       res.on('data', (chunk) => { body += chunk; });\r\n//       res.on('end', () => resolve({ statusCode: res.statusCode || 500, body }));\r\n//     });\r\n\r\n//     req.on('error', (e) => reject(e));\r\n\r\n//     if (data) {\r\n//       req.write(JSON.stringify(data));\r\n//     }\r\n\r\n//     req.end();\r\n//   });\r\n// };\r\n\r\nimport http from 'http';\r\n\r\nconst request = (method: string, url: string, data?: any) => {\r\n  return new Promise<{ statusCode: number; body: any }>((resolve, reject) => {\r\n    const req = http.request(\r\n      {\r\n        hostname: 'localhost',\r\n        port: 3000,\r\n        method,\r\n        path: url,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Content-Length': data ? Buffer.byteLength(JSON.stringify(data)) : 0,\r\n        },\r\n      },\r\n      (res) => {\r\n        let body = '';\r\n        res.on('data', (chunk) => (body += chunk));\r\n        res.on('end', () => resolve({ statusCode: res.statusCode || 500, body: JSON.parse(body) }));\r\n      }\r\n    );\r\n\r\n    req.on('error', reject);\r\n    if (data) {\r\n      req.write(JSON.stringify(data));\r\n    }\r\n    req.end();\r\n  });\r\n};\r\n\r\nexport const testUtils = {\r\n  get: (url: string) => request('GET', url),\r\n  post: (url: string, data: any) => request('POST', url, data),\r\n  put: (url: string, data: any) => request('PUT', url, data),\r\n  delete: (url: string) => request('DELETE', url),\r\n};\r\n\r\n"]}